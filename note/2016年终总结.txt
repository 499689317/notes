
2017/1/7
/****************************************2016年终总结*********************************************

 * 目录 *
a*********: 前言
b*********: 前端代码编写
c*********: 游戏前端
d*********: 前端过渡到服务器



a: 前言篇
	从2016年年初到现在一直在做关于游戏前端，从原来只有pixi.js渲染库到现在相对完善的开发环境集合，总得来说进步有以下几点：
1. 数据同步使用指令形式，无须模块开发人员关心数据同步
2. ui使用xml标签模式堆叠，很大程度减小bug出现
3. 开发模块中使用大量的刲装组件，使开发更专注于逻辑
4. 前端建立字库方便后期跨语言移植
5. 
	指令同步数据解决了第一个项目中前端数据经常不同步的弊端，前端建立了各个模块的数据模型，使前端数据更加健壮，不易出错，
数据问题彻底与ui视图分离，使数据查错与获取更加方便
	ui使用标签来写主要是一种编程思想的统一，为的是当同步的数据改变时能更方便的刷新ui，主要还是解决了数据与ui的表现统一
问题，同时很大程度降低了前端开发的难度。在第一个项目中主要遇到的问题是ui刷新的问题，很多时候数据已经变了，但是视图没变
或者变成其它样式。
	组件刲装也是很大的进步之一，原有的pixi.js在对一些控件的刲装上是很薄弱的。很多时候须要前端开发人员自己实现各种控件，这
么做导致的问题很多。很多重复控件功能相同难统一导致维护成本高，并具相同的代码多且杂。使用统一控件是比较省心的做法，控件的高
度统一解决了开发后期新功能添加与维护的成本，代码简洁高效。
	建立字库也可以说是进步，后期将比较快生成其它语言版本


b: 前端代码编写篇
	主要用第一个项目代码与第二第三个项目代码进行对比，第一个项目主要做了签到，充值，部分活动，新手引导等模块，其中主要遇到的
问题有数据同步出错，数据同步ui出错，控件实现过多，代码重复杂且乱。
	从第二个项目开始，为了解决这些问题，分别经厉了几个阶段：
1. 抽取视图
2. 抽取数据
3. 更新数据
4. 刷新视图
	抽取视图相对比较简单的过程，根据psd原图进行摆放即可，这个过程需要根据文档判断一些特殊的ui，这些ui需要能够根据数据时实更新，
一般可以将这些ui置为全局变量，在一个更新方法内取出这些ui进行时实更新。比较好的方法可以用一个全局容器来装这些ui，相比于前者更
符合前端MVC的思想。
	抽取数据主要是从数据模型中拿取数据(也可以从数据库中拿)，这个过程需要注意的是js对象的引用特性，所以一般在抽取数据时都是拿取
数据的副本进行操作，这个过程比较重要。对象深拷贝即可
	更新数据更多的是对数据的操作，实现一些简单的排序算法与查找算法必须要会。控件操作总是伴随数据的变化，这一步主要要注意的是
对数据操作正确性，操作前的数据需要确保是正确的副本，打样作后的数据要确保是正确的，确定数据没有问题后才能将数据同步至数据库中
前端相对不要求性能高的算法，所以前端相对比较好处理数据
	对数据的更新意味着视图的变化，如何将视图变为我们想要的视图是最终结果。这一步有几种方法可以借鉴：
1. 所有ui刷新一遍
2. 指定ui刷新一遍
	所有ui刷新一遍是比较好的方法，但是性能没有第二种方法好。这种方法优化方案是遍历所有的ui，将数据改变的ui刷新，未变的ui跳过，
这个过程需要将所有ui存入容器中，每次更新都遍历。这么做的好处是不会有需要更新的ui因为疏忽而露掉更新，很大程度上减少问题出现，开
发中这种方法也比较常用
	第二种方法是将指定要更改的ui抽取出来更新，这种方法性能比较好。但带来的问题也很多，当需要更新的ui比较多时，有些ui很难抽取出
来，并且很可能会漏掉部分ui忘记更新。后期维护也会因为一些原因将问题复杂化。




c: 游戏前端篇
	关于游戏前端我主要分了三块：
1. 游戏主玩法，如战斗
2. 资源处理
3. ui模块
	游戏项目一般来说有一个主循环，这个主循环是整个项目的驱动，一般来说可以自定义这个循环的频率，但是主流的是一秒跑60帧。按照人
眼的视觉体验60帧是非常顺畅的，但是实际上项目跑不满60帧，不过人眼在24帧以上是不会感觉卡顿的。所以即使跑不满帧也不影响游戏的体验
游戏场景中有比较多的模块都需要主循环的定时器，一方面是为了节省性能(另外增加定时器会影响游戏性能)，另一方面是使游戏体验更佳(一秒
钟画60帧)，这点在战斗场景中非常重要，为了让人物在地图中移动流畅就须要高帧率。如果帧率低于24帧，则会感觉卡顿。
	

	战斗一般来说可以分为几部分来总结：
1. 地图推图
2. 人物移动
3. 战斗特效
	地图推图中要注意的是地图加载方式，如果使用大地图，则一次性加载一张地图，如果使用拼接的方式加载地图，则需要处理地图资源并按
规则将加载下来的地图碎片重新拼接，未加载的图片将用默认地图替换。
	人物移动主要是寻路算法与边界处理，寻路算法主流的有A*寻路，图寻路。。。。人物在移动过程中不能超出地图边界
	战斗特效主要在战斗pk中出现，与技能脚本关系紧密


	资源处理注意点：
1. 资源命名规则
2. 资源合并
3. 资源压缩
	这部份主要使用一些脚本工具来完成，需要注意的还是命名规则，代码中一般是根据资源名称来拿取资源。


	ui模块主要是游戏的各个玩法模块，新项目中主要写了以下几个模块：
1. 竟技场
2. 战斗场景中的各种ui
3. 聊天模块
4. 帧动画展示的控件
5. 历练模块
6. 邮箱
7. 地图ui
8. 坐骑成长线模块
9. 跑马灯
10. 充值
11. 商城
12. 熔炼
13. 翅膀模块
14. 武林争霸


d: 前端过渡到服务器篇

新项目写了邮箱，聊天，跑马灯的服务器。

聊天服务器主要以广播消息为主，一个区为一个世界聊天，数据库存取5条聊天记录和5条系统消息
跑马灯使用聊天服务器频道推送消息

邮箱需要注意的是领取附件的邮件，需要做同步数据操作

