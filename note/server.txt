
/**
 * docker
 */
docker替代虚拟机
windows系统下安运行docker：
	windows7系统需要安装Toolbox运行docker
	+ git
	+ VB虚拟机


/**
 * 环境搭建
 */

// 环境
CentOS 7虚拟机
node.js
npm
docker

// 资源
mnode_build.tar包
服务器项目dd-logic

// 步骤
虚拟机安装CentOS 7系统
搭建node.js与npm环境
搭建docker环境

mnode_build.tar包与项目dd-logic存放在windows主机下
通过共享文件夹或者(Doken/win-sshfs)将开启主机磁盘与虚拟机间的共享访问(mount -t vboxsf share /mnt/share 挂载的方式)
如: 开启主机一个盘符F挂载至CentOS下的/mnt/cdrom下
	在虚拟机下的/mnt/cdrom/中就可以访问windows主机下F盘内的资源了(mnode_build.tar包与项目dd-logic)

// 启动
在虚拟机下启动docker服务: service docker start
导入mnode_build.tar资源包: docker load < /mnt/cdrom/mnode_build.tar
运行服务器: docker run -p 8080:8080 -p 3000:3000 --rm -ti --privileged=true（这个参数解次CentOS 7权限问题） -v /mnt/cdrom/dd-logic:/data/code mnode:build /bin/bash
cd /data/code
npm install --no-bin-links
node test.js启动服务器



/**
 * 服务器
 */

DB: 取表中数据, 例如: DB.MC("vars");
DBQ: 实例一个空对象, 例如: DBQ().dc(dc_name, mod_name, uid);
DBL: 管理dbl目录下的文件对象, 例如: DBL.tools;
	dc: dataHandle对象
	dc常用方法: field(key); // 取对象上key字段的值


2016/12/12
往内存push数据，服务器每隔一段时间会往数据库刷入数据(覆盖的形式)
DBQ.dc(dc_name, mod_name, zid)
				.push("w", data)
				.remove_after(5);
从内存中取数据(此时内存中的数据已经初始化完成)
DBQ.dc(dc_name, mod_name, zid)
				.field("w")
				.value();



/**
 * 顺序
 */

api文件夹下定义与前端交互的api接口
(
接收客户端数据，并验证数据
响应客户端数据
)

通过DBL对象将接收的数据通过参数形式交由dbl内处理逻辑，并返回响应数据
(
isError()过滤
return Error(errorcode);ok == 0
)


/**
 * 聊天
 */

// 世界聊天(所有人推送消息, 每个人即是消息的发送者也是消息的接收者)
客户端编辑文本(检测文本字数, 不超过100个字)
客户端发送请求给服务器, 服务器负责将客户端的数据推送给所有玩家(也有可能是指定用户)


// 世界聊天(一对多推送)
// 行会聊天(服务器一对多推送)
// 好友私聊(服务器一对一推送)


// 单发消息
reply(1, uid, str);
// 广播消息
broadcask(1, str);
