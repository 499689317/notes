
/////////////////////
// 
/////////////////////
www
	
	内网(LAN)

		1. 两台或多台设备间的简单物理连接，这些设备共亨数据传输消耗
		2. 局域网一般覆盖面积在家庭的两台pc机或一个单位或机构的几公里范围内
		3. 内网ip由协议分配的内网ip(192.168开头),子网掩码一般设置为(255.255.255.0)比较少见的(255.255.0.0)
		4. 其中将一台或多台大存储机器设置为服务器，其它客户pc与它连接，共享服务器上的数据

	外网(WAN)

		1. 各地区，或国家级的网络互联，形成大型的互联网(intenet)
		2. 世界上最大的互联网是因特网(Intenet)，几乎所有的网络都来自因特网，都是由因特网服务提供商(ISP)提供收费服务(服务商有一台或多台服务器，用户连接上这些服务器就能上因特网了)
		3. 外网实现分配唯一外网ip，将用户连接到一起

	城域网(MAN)

		1. 一个城镇间的局区域连接，一些特殊需求，没什么卵用

1. tcp/ip 协议族

	1. 网络拓扑：网型，星型，链型，环型
	2. 现在流行的拓扑是星型，实现价钱底廉，简单易用的形式
	3. 星型拓扑实现点对点由路由或者集线器连接方式，如果路由器或者集线器出现故障将会导致线下局域网全部瘫痪

2. tcp/ip 协议对www的分层

	1. 应用层

		1. 与用户交互层，是用户唯一能够可见的一个层级
		2. 最常见的模式：c/s模式(cline/servers),客户端/服务器
		3. 运行于这个模式下的计算机程序我们称之为进程，在客户端程序我们称之为客户端进程，在服务器的程序称之为服务器进程
		4. 服务器进程是响应客户端进程设计的，所以服务器进程必须要总是开启状态，已及时反馈客户端的请求
		5. 客户端进程则在用户须要使用这个进程时开启，不须要时可以关闭
		6. 一个服务器进程可以对应多个客户端进程(服务器进程是响应客户端为主的)
		7. 这个层级中的地址：统一资源管理地址(URL)简称网址，这个地址根据分布各地的dns服务器负责解析为计算机的唯一地址(ip地址)

	2. 传输层

		1. 传输层提供一切服务的标准
		2. 在传输层，客户端进程请求连接服务器进程时，仅仅根据ip地址只能寻找到服务器主机，不能识别当前须要连接哪一个进程，此时须要一个标识地址(端口号)
		3. 服务器的各个进程的端口号是确定的，但在客户端进程的端口号是计算机临时分配的(一定范围内),比如：远程连接服务(telnet)端口号为23，数据传输(ftp)端口号为21
		4. 传输层能够启到流量控制与数据较验的作用，流量控制检测数据传输过程中缓存区的数据是否过量(发包与接收包),数据较验则对包的序号与数量进行内部分析
		5. 传输层的几个重要协议：udp/tcp/.....
			udp: 简单快速的连接方式，源发送的包到目标主机后不会收到反馈，目标主机可能没有收到，也可能收到错误的包，但会直接丢弃，不返馈给源，连接不可靠(适合在线视频与音频文件的传输)
			tcp: 3握手连接，4握手断开连接，连接是安全可靠的，当源发送包给目标主机后，目标主机进行检错较验，如果包有问题或者包在传输过程丢失则目标主机反馈信息给源，源收到信息后重新发送包给目标主机

	3. 网络层

		1. 网络层地址ipv4/ipv6
		2. 网络层最重要的作用是路由选择
		3. 路由器是如何让别人知道自已的路由地址的(路由选择协议)：新加入的路由能够自发广播自已的地址给互联网上的所有已连接的路由，其它路由将会保存这个地址
		4. 路由器总是能够找到数据传输过程的最佳路径(比如：路由断裂，堵塞)
		5. ipv4地址是由32位二进制用4组8位(0-255)由点分法分隔的一串数字，现在已经不够用了，逐渐推广使用ipv6

	4. 数据链路层

		1. 实现数据帧的传输，数据在这个层现实点对点的传输
		2. 结点开始与结点结束时对数据进行较验，只实现结点到结点的较验，不进行结点内的较验(结点内的较验由传输层完善)
		3. 每个计算机有一个固定不变的物理ip,经由arp服务器将ip映射为mac地址

	5. 物理层

		1. 在物理层中将链路层的数据帧转化为二进制位流进行物理传输，此时不涉及任何逻辑上的干扰。

////////////////////
// 
////////////////////
www应用

1. 邮件系统
	
	1. 基于客户端/服务端/客户端模式
	2. MAT---MAA形式
	3. MAT客户端---MAT服务器-----MAT服务器-----MAA客户端
	4. POP邮件推送协议，负责发送邮件时推送消息(不实用了)
	5. STMP协议，是POP的超集，功能比POP强大

2. www万维网(浏览器，www服务器，http协议)

	1. 现在主流英特网呈现方式(页面文档的形式)
	2. 超文本传输协议(http)
	3. 超文本文档与超媒体文档

		1. 超文本文档
			以文本文件为主，一个链接连着一个文本文档(页面)，从任意页面跳转到任意页面
		2. 超媒体文档
			以多媒体文件为主(音频，视频)，依然使用一个链接连接一个页面的形式

	4. 静态文档

		1. 一直都有，在请求该文档前就已经创建完成了
		2. 客户端在请求静态文档时，服务端将文档的副本返回给客户端展示

	5. 动态文档

		1. 客户端请求时动态创建
		2. 考虑到服务器流量与并发的瓶颈，一般前端会做一系统的逻辑处理(javascript脚本)，必要的请求将留给服务器完成
		3. 服务器使用java,php,c++完成动态更新前端展示

	6. www地址

		使用统一资源管理地址(URL)，服务协议: 服务器地址/端口号/文件路径/

3. FTP文件传输系统
	
	1. 实现俩台设备间的文件传输,目标设备开放ftp服务，源设备也需要开放ftp服务
	2. 
4. TELNET服务

	1. 开放telnet服务，远程终端另一台设备，实现远程控制

////////////
// 2016/7/29
////////////
http和socket
http:
    http全文是超文本传输协议,是一种万维网常用的协议,
    它是TCP协议的一种典型上的应用,而TCP协议有一个典型的特点,就是"三次握手",记住这个特征,因为很多时候我们都会忘记这个基本特征.
    http还有一个特点是"断链接",你也可以说是短链接,不过用"断链接"我觉的更合适.也就是说当我们用http协议打开一个信息点的时候,信息读取完毕双方会自动断开.
socket:
    socket(套接字)是TCP/IP协议的基本操作单元。它是网络通信过程中端点的抽象表示。
    同HTTP不同的是http只能走tcp,socket不仅能走tcp,而且还能走udp,这个是socket的第一个特点
    socket的另外一个特点是他可以是"长链接",也就是说除非双方主动断开,否则,他不会自动断开.这个特点非常的好,很多应用都会需要长链接,来者不拒,为了保持服务器资源的最大利用率,通常我们会要求双方通过定时的心跳方式来确认长链接的有效性.只要心跳不存在,服务器就可以及时剔除掉这些死链接.
    常规处理下,哪些地方用"PUSH", 哪些地方用"PUll"了.
    也就是说在TCP的握手协议的基础上,我们是完全可以通过socket的互相应答的方式实现http的请求-应答传输的.尤其是在一些特定的应用下,使用简单的socket模拟http,比用http要快很多